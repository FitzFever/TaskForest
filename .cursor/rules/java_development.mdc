---
description: Java开发规范指南
globs: *.java
---
# Java开发规范

> file_patterns: ["*.java"]
> description: Java开发的核心规范和关键实践

## 核心原则
> required: true

### KISS原则
```java
// ✅ 推荐：简单直接的实现
@Service
@RequiredArgsConstructor
public class UserService {
    private final UserRepository userRepository;
    
    public Optional<User> getUser(Long userId) {
        return userRepository.findById(userId);
    }
    
    public boolean validateUser(User user) {
        return user != null && user.getId() != null && user.getName() != null;
    }
}

// ❌ 避免：过度设计
public interface UserServiceFactory {
    UserService createService(String type);
}

@Component
public class UserServiceFactoryImpl implements UserServiceFactory {
    @Override
    public UserService createService(String type) {
        return switch (type) {
            case "admin" -> new AdminUserService(new AdminValidator(), new AdminRepository());
            case "guest" -> new GuestUserService(new GuestValidator(), new GuestRepository());
            default -> throw new IllegalArgumentException("Unknown type: " + type);
        };
    }
    // 过度的抽象和工厂模式
}
```

### 显式优于隐式
```java
// ✅ 推荐：明确的参数验证和返回值
@Service
public class UserService {
    public Optional<User> getUserById(Long userId) {
        Objects.requireNonNull(userId, "用户ID不能为空");
        return userRepository.findById(userId);
    }
}

// ❌ 避免：隐含的类型转换和返回值
@Service
public class UserService {
    public User getUser(String id) {
        // 隐式类型转换，可能抛出异常
        return userRepository.findById(Long.parseLong(id))
            .orElse(null);  // 可能返回null
    }
}
```

### 组合优于继承
```java
// ✅ 推荐：使用组合实现功能
@Service
@RequiredArgsConstructor
public class DataProcessor {
    private final DataReader reader;
    private final DataValidator validator;
    
    public ProcessResult process(String dataPath) {
        Data data = reader.read(dataPath);
        return validator.validate(data);
    }
}

// ❌ 避免：过度继承
public abstract class BaseProcessor {
    abstract void read();
    abstract void validate();
    abstract void process();
}

public class JsonProcessor extends BaseProcessor {  // 继承导致强耦合
    @Override
    void read() {}
    @Override
    void validate() {}
    @Override
    void process() {}
}
```

### 依赖注入优于直接实例化
```java
// ✅ 推荐：依赖注入
@Service
@RequiredArgsConstructor
public class ImageProcessor {
    private final ProcessorConfig config;
    
    public BufferedImage processImage(BufferedImage image) {
        return Thumbnails.of(image)
            .size(config.getTargetWidth(), config.getTargetHeight())
            .asBufferedImage();
    }
}

// ❌ 避免：直接实例化
public class ImageProcessor {
    private static final ProcessorConfig CONFIG = new ProcessorConfig();  // 直接实例化
    
    public BufferedImage processImage(BufferedImage image) {
        return Thumbnails.of(image)
            .size(CONFIG.getTargetWidth(), CONFIG.getTargetHeight())
            .asBufferedImage();
    }
}
```

### 代码质量
```java
// ✅ 推荐：清晰的方法签名和文档
/**
 * 计算平均分数
 * @param scores 分数列表
 * @return 平均分数，列表为空时返回0
 */
public double calculateAverage(List<Double> scores) {
    return scores.stream()
        .mapToDouble(Double::doubleValue)
        .average()
        .orElse(0.0);
}

// ❌ 避免：含糊不清的实现
public double calc(List l) {
    return l.isEmpty() ? 0 : l.stream().mapToDouble(v -> (double)v).average().getAsDouble();
}
```

### 错误处理
```java
// ✅ 推荐：明确的错误处理
public class DataProcessor {
    public ProcessResult processData(Map<String, Object> data) {
        if (data == null) {
            throw new IllegalArgumentException("数据不能为空");
        }
        if (data.isEmpty()) {
            throw new IllegalArgumentException("数据不能为空Map");
        }
        return new ProcessResult(transform(data));
    }
}

// ❌ 避免：吞掉异常
public class DataProcessor {
    public Map<String, Object> process(Map<String, Object> data) {
        try {
            return transform(data);
        } catch (Exception e) {
            return new HashMap<>();  // 吞掉异常
        }
    }
}
```

## 代码组织
> required: true

### 包结构
```java
// 标准包结构
package com.company.project;

// 核心包导入
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

// 第三方库导入
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import lombok.RequiredArgsConstructor;

// 项目内部导入
import com.company.project.domain.User;
import com.company.project.repository.UserRepository;
```

### 类设计
```java
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ProcessorConfig {
    private String modelPath;
    private int batchSize;
    private int maxRetries = 3;
}

@Service
@RequiredArgsConstructor
public class DataProcessor {
    private final ProcessorConfig config;
    private final DataValidator validator;
    
    @Transactional(readOnly = true)
    public List<ProcessResult> process(List<Data> dataList) {
        return dataList.stream()
            .map(this::processItem)
            .collect(Collectors.toList());
    }
    
    private ProcessResult processItem(Data item) {
        validator.validate(item);
        return transform(item);
    }
}
```

## 性能优化
> required: true

### 关键优化
```java
// ✅ 推荐：合理使用缓存
@Service
public class ConfigService {
    @Cacheable(value = "configs", key = "#key")
    public String getConfig(String key) {
        return loadConfig().get(key);
    }
}

// ✅ 推荐：流式处理大数据
@Service
public class LargeFileProcessor {
    public void processLargeFile(Path filePath) {
        try (Stream<String> lines = Files.lines(filePath)) {
            lines.forEach(this::processLine);
        }
    }
}
```

## 测试规范
> required: true

### 单元测试
```java
@SpringBootTest
class DataProcessorTest {
    @Autowired
    private DataProcessor processor;
    
    @MockBean
    private DataValidator validator;
    
    @Test
    @DisplayName("测试数据处理器的核心功能")
    void testDataProcessor() {
        // 准备测试数据
        ProcessorConfig config = ProcessorConfig.builder()
            .modelPath("./models")
            .batchSize(32)
            .build();
        
        List<Data> testData = List.of(new Data(1L, "test"));
        
        // 验证核心功能
        List<ProcessResult> results = processor.process(testData);
        assertThat(results)
            .isNotEmpty()
            .first()
            .matches(r -> "success".equals(r.getStatus()));
        
        // 验证错误处理
        assertThatThrownBy(() -> processor.process(null))
            .isInstanceOf(IllegalArgumentException.class);
    }
}
```

## 检查清单
> required: true

### 代码规范检查
- [ ] 是否遵循KISS原则，避免过度设计
- [ ] 是否使用显式代码，避免隐式行为
- [ ] 是否优先使用组合而非继承
- [ ] 是否使用依赖注入而非直接实例化
- [ ] 是否添加了完整的JavaDoc注释

### 设计原则检查
- [ ] 是否职责单一，功能内聚
- [ ] 是否正确处理异常情况
- [ ] 是否遵循标准的包结构
- [ ] 是否定义了清晰的接口
- [ ] 是否使用了合适的设计模式

### 性能检查
- [ ] 是否合理使用缓存
- [ ] 是否正确处理大数据场景
- [ ] 是否优化了数据库查询
- [ ] 是否避免了内存泄漏
- [ ] 是否使用了适当的并发控制

### 测试检查
- [ ] 是否编写了单元测试
- [ ] 是否包含集成测试
- [ ] 是否测试了边界条件
- [ ] 是否测试了异常情况
- [ ] 是否使用了测试替身（Mock/Stub） 